@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All">Home</MudNavLink>
    <MudNavLink Href="/counter" Match="NavLinkMatch.All">Counter</MudNavLink>
    <MudNavLink Href="/weather" Match="NavLinkMatch.All">Weather</MudNavLink>
    <MudNavLink Href="/auth" Match="NavLinkMatch.All">Auth Required</MudNavLink>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="/Account/Manage" Match="NavLinkMatch.All">@context.User.Identity?.Name</MudNavLink>
            <div class="nav-item px-3">
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="nav-link">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                    </button>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="/Account/Register" Match="NavLinkMatch.All">Register</MudNavLink>
            <MudNavLink Href="/Account/Login" Match="NavLinkMatch.All">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

